Google Dorking
==============
site        => site:python.org
inurl       => inurl:"/course/jumpto.php" site:example.com
intitle     => intitle:"index of" site:example.com
link        => link:"https://en.wikipedia.org/wiki/ReDoS".
filetype    => site: filetype:log site:example.com.

Wildcard (*)    => "how to hack * using Google"
Minus (-)       => "how to hack websites" -php (how to hack websites but not php)
Or ( | )        => "how to hack" site:(reddit.com | stackoverflow.com)
Quotes (" ")    => "how to hack" otherwise how, to, and hack
EX:-
    site:*.example.com
    site:example.com inurl:app/kibana
    site:s3.amazonaws.com COMPANY_NAME
    site:example.com ext:php
    site:example.com ext:log
    site:example.com ext:txt password
    

nslookup facebook.com
whois 157.240.2.35

Autonomous System Numbers (ASNs)
================================
whois -h whois.cymru.com 157.240.2.20
whois -h whois.cymru.com 157.240.2.27
    => The -h flag in the whois command sets the WHOIS server to retrieve information 
    from, and whois.cymru.com is a database that translates IPs to ASNs

Certificate Parsing
===================
    => Another way of finding hosts is to take advantage of the Secure Sockets Layer (SSL) 
    certificates used to encrypt web traffic. An SSL certificate’s Subject Alternative Name
    field lets certificate owners specify additional hostnames that use the same certificate, 
    so you can find those hostnames by parsing this field. Use online databases like "crt.sh", 
    "Censys", and "Cert Spotter" to find certificates for a domain.
    => For example, by running a certificate search using "crt.sh" for facebook.com, we can find
    Facebook’s SSL certificate. You’ll see that that many other domain names belonging to Facebook are listed: 

Subdomain Enumeration
=====================
    => The best way to enumerate subdomains is to use automation. Tools like "Sublist3r", "SubBrute", "Amass", 
    and "Gobuster" can enumerate subdomains automatically with a variety of wordlists and strategies. 

    => "Sublist3r" works by querying search engines and online subdomain databases 

    => "SubBrute" is a brute-forcing tool that guesses possible subdomains until it finds real ones. 

    => "Amass" uses a combination of DNS zone transfers, certificate parsing, search engines, and subdomain 
    databases to find subdomains.

    => "Gobuster" is a tool for brute-forcing to discover subdomains, directories, and files on target web servers. 
    Its DNS mode is used for subdomain bruteforcing. In this mode, you can use the flag -d to specify the domain 
    you want to brute-force and -w to specify the wordlist you want to use:
        => ```
            gobuster dns -d target_domain -w wordlist
        ``` 
    => "Altdns" discovers subdomains with names that are permutations of other subdomain names. 
        => ```
            https://github.com/infosec-au/altdns/
        ```
    => Remove duplicate items from a set of two wordlists:
        => ```
            sort -u wordlist1.txt wordlist2.txt
        ```

    Wordlist
    ========
        => Daniel Miessler’s SecLists at https://github.com/danielmiessler/SecLists/ is a pretty extensive one
        => You can also use a Wordlist generation tool like "Commonspeak2" (https://github.com/assetnote/commonspeak2/) 
        to generate wordlists based on the most current internet data.

Service Enumeration
===================
    ```
        nmap IP_ADDRESS
        nmap -sV IP_ADDRESS
        nmap T4 -p- -A IP_ADDRESS
        nmap -p- --min-rate=10000 -oA nmap/twomillion-allports -v IP_ADDRESS
    ```
    Passive scanning
    ================
    => "Shodan" helps to discover the presence of webcams, web servers, or even power plants based on criteria 
    such as hostnames or IP addresses. Alternatives to "Shodan" include "Censys" and "Project Sonar". Combine 
    the information you gather from different databases for the best results.

Directory Brute-Forcing
=======================
    => You can use "Dirsearch" or "Gobuster" for directory brute-forcing use wordlists.
    => "403 - protected route", Examine 403 and try to bypass the protection to access the content.
        => ```
            ./dirsearch.py -u scanme.nmap.org -e php (-u hostname, -e file extension)
            gobuster dir -u target_url -w wordlist (-u domain/subdomain, -w wordlist)
        ```
    => Screenshot tool like "EyeWitness" or "Snapper" to automatically verify that a page is hosted on each location. 
    Keep an eye out for hidden services, such as developer or admin panels, directory listing pages, analytics pages, 
    and pages that look outdated and illmaintained.
        => ```
            EyeWitness - https://github.com/FortyNorthSecurity/EyeWitness
            Snapper - https://github.com/dxa4481/Snapper
        ```

Spidering the Site
==================
    => OWASP Zed Attack Proxy (ZAP) has a built-in web spider you can use. Burp Suite has an equivalent tool called the 
    "crawler", but I prefer ZAP’s spider. Another way of finding buckets is to search a company’s public GitHub repositories 
    for S3 URLs. "GrayhatWarfare" is an online search engine you can use to find publicly exposed S3 buckets. 
    Try searching these repositories for the term s3. Finally, you can try to brute-force buckets by using keywords.  
    is a tool that helps you do this (use wordlist). "Lazys3" is a tool that helps you do this (use wordlist).
    
    => Another good tool is "Bucket Stream", which parses certificates belonging to an organization and finds S3 buckets based 
    on permutations of the domain names found on the certificates. Once you’ve found a couple of buckets that belong to the target's 
    organization, use the AWS command line tool to see if you can access one.

        => ```
            ZAP             - https://www.zaproxy.org/
            GrayhatWarfare  - https://buckets.grayhatwarfare.com/
            Lazys3          - https://github.com/nahamsec/lazys3/
            Stream          - https://github.com/eth0izzle/bucket-stream/

            AWS Command Line Tool
            =====================
                - pip install awscli
                - https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html
        ```
        ```
            site:s3.amazonaws.com COMPANY_NAME 
            site:amazonaws.com COMPANY_NAME
            amazonaws s3 COMPANY_NAME 
            amazonaws bucket COMPANY_NAME
            amazonaws COMPANY_NAME
            s3 COMPANY_NAME
        ```

        Listing the contents of the bucket
        ==================================
            =>  If the organization reveals info such as active API key or personal info, you should report this right away.
            => Exposed S3 buckets alone are often considered a vulnerability. You can also try to upload new files to the
            bucket or delete files from it. If you can mess with its contents, you might be able to tamper with the web 
            application’s operations or corrupt company data.
            => ```
                aws s3 ls s3://BUCKET_NAME/
                aws s3 cp s3://BUCKET_NAME/FILE_NAME/path/to/local/directory (Read files by copying your local machine)
            ``` 
GitHub Recon
============
    => usernames to audit, potentially vulnerable code snippets, most recent code fixes, security patches, 
    check the Blame and History sections at the top-right corner of the file’s page to see how it was developed.
    Visit their pages, Find repositories related to the projects and record them, along with the usernames of 
    the organization’s top contributors, which helps find more relevant repositories. Then dive into the code. 
    For each repository, pay special attention to the Issues and Commits sections. Recent code changes that haven’t 
    stood the test of time are more likely to contain bugs Look at any protection mechanisms implemented to see if you 
    can bypass them.

    => Search the organization’s repositories for terms like key, secret, and password to locate hardcoded user credentials.
    "KeyHacks" to check if the credentials are valid and learn how to use them to access the target’s services. 
        => authentication, password reset, state-changing actions, or private info reads
        => user input, such as HTTP request parameters, HTTP headers, HTTP request paths, database entries, file reads, 
        and file uploads, because they provide potential entry points for attackers to exploit the application’s vulnerabilities

    => Tools like "Gitrob" and "TruffleHog" can automate the GitHub recon process. Gitrob locates potentially sensitive files 
    pushed to public repositories on GitHub. "TruffleHog" specializes in finding secrets in repositories by conducting regex 
    searches and scanning for high-entropy strings.
    => ```
        KeyHacks    - https://github.com/streaak/keyhacks/
        Gitrob      - https://github.com/michenriksen/gitrob/
        TruffleHog  - https://github.com/trufflesecurity/truffleHog/

        facebook github
    ```

Other Sneaky OSINT Techniques
=============================
    => Check the company’s job posts which reveal the technologies the company uses. search for employees profiles on LinkedIn, 
    and read employees personal blogs or their engineering questions on forums like Stack Overflow and Quora. The expertise of 
    a company’s top employees often reflects the technology used in development.

    => [social media/Work calendars] often contain meeting notes, slides/SlideShare, and sometimes even login credentials. 
    "Pastebin" is a website for pasting and storing text online for a short time. "PasteHunter" to scan for publicly pasted data.

    => Lastly, consult archive websites like the "Wayback Machine", a digital record of internet content. Using the "Wayback Machine", 
    you can find old endpoints, directory listings, forgotten subdomains, URLs, and files that are outdated but still in use. 
    Tomnomnom’s tool "Waybackurls" can automatically extract endpoints and URLs from the "Wayback Machine".
        => ```
            Pastebin            - https://pastebin.com/
            PasteHunter         - https://github.com/kevthehermit/PasteHunter/
            Wayback Machine     - https://archive.org/web/
            Waybackurls         - https://github.com/tomnomnom/waybackurls/
        ```

Tech Stack Fingerprinting
=========================
    => Fingerprinting is identifying the software brands and versions that a machin app uses [for targeted attacks on the application]
    because you can search for any known misconfigurations and publicly disclosed vulnerabilities related to a particular version.
    The security community classifies known vulnerabilities as "Common Vulnerabilities and Exposures (CVEs)" and gives each CVE a 
    number for reference.

    => Next, in Burp, send an HTTP request to the server to check the HTTP headers used to gain insight into the tech stack. Search 
    for phrases like powered by, built with, and running. [Powered by: WordPress 3.3.2]. Also search for Technology-specific headers, 
    cookies, clues, file extensions, filenames, folders, and directories.

    => Wappalyzer is a browser extension that identifies content management systems, frameworks, and programming languages used on 
    a site. "BuiltWith" is a website that shows you which web technologies a site is built with. "StackShare" is an online platform 
    that allows developers to share the tech they use. "Retire.js" is a tool that detects outdated JavaScript libraries and Node.js 
    packages.
    
    => ```
        CVE database    - https://cve.mitre.org/cve/search_cve_list.html
        Wappalyzer      - https://www.wappalyzer.com/
        BuiltWith       - https://builtwith.com/
        StackShare      - https://stackshare.io/
    ```

Writing Your Own Recon Scripts
==============================
    => Good recon is an extensive process. But it doesn’t have to be time-consuming or hard to manage. [takes tools help if can].
    Adding the Date of the Scan to the Output. "Cron" is a job scheduler on Unix-based operating systems. It allows you to schedule 
    jobs to run periodically. For example, You can run a scanner that checks for vulnerabilities on the same target every day. You 
    can configure "Cron’s" behavior by editing files called "crontabs" and all "crontabs" follow this same syntax. (Ex:- crontab -e)
        => ```
            "30 21 * * * ./scan.sh"
            =======================
            A B C D E command_to_be_executed
            A: Minute (0 – 59)
            B: Hour (0 – 23)
            C: Day (1 – 31)
            D: Month (1 – 12)
            E: Weekday (0 – 7) (Sunday is 0 or 7, Monday is 1...)
        ```
        => `run-parts` cmd in crontabs tells Cron to run all the scripts stored in an existing directory. For example, you can 
        store all your recon tools in a directory and scan your targets periodically. The following line tells "Cron" to run all 
        scripts in my security directory every day at 9:30 PM: 
            => ```
                30 21 * * * run-parts /Users/vickie/scripts/security
            ```
            => The following command outputs the difference between two files.
                => ```
                    git diff SCAN_1 SCAN_2
                ```
            => Lastly, use Cron to scan the target and upload the files to GitHub periodically:
                => ```
                    30 21 * * * ./recon.sh facebook.com
                    40 21 * * * git add *; git commit -m "new scan"; git push -u origin master
                ```
        
        => Shodan has an API that allows you to query its database. You could configure your bash script to send requests to 
        this URL and parse the results. LinkedIn also has an API that lets you query its database. For example, you can use 
        URL to access information about a user on LinkedIn.
        
        => The "Censys API" allows you to access certificates by querying ots endpoint. Other tools mentioned in this chapter, 
        like "BuiltWith", "Google search", and "GitHub search", all have their own API services. These APIs can help you discover 
        assets and content more efficiently by integrating third-party tools into your recon script. Note that most API services 
        require you to create an account on their website to obtain an API key, which is how most API services authenticate their users. 
        You can find information about how to obtain the API keys of popular recon services below. 
        => ```
            Shodan API                  - https://developer.shodan.io/ 
                                        - https://api.shodan.io/shodan/host/{ip}?key={YOUR_API_KEY}

            LinkedIn API                - https://www.linkedin.com/developers/
                                        - https://api.linkedin.com/v2/people/{PERSON ID}

            Censys API                  - https://censys.io/api
                                        - https://censys.io/api/v1

            Popular recon services      - https://github.com/lanmaster53/recon-ng-marketplace/wiki/API-Keys/.
        ```

My personal preferences
=======================
    Scope Discovery
    ===============
        => ```
            WHOIS                   https://viewdns.info/reversewhois/
            ViewDNS reverse IP      https://viewdns.info/reverseip/
            crt.sh                  https://crt.sh/
            Censys                  https://censys.io/
            Cert Spotter            https://sslmate.com/certspotter/
            Sublist3r               https://github.com/aboul3la/Sublist3r
            SubBrute                https://github.com/TheRook/subbrute
            Amass                   https://github.com/OWASP/Amass
            Gobuster                https://github.com/OJ/gobuster/
            SecLists                https://github.com/danielmiessler/SecLists/
            Commonspeak2            https://github.com/assetnote/commonspeak2
            Altdns                  https://github.com/infosec-au/altdns
            Nmap                    https://nmap.org
            Masscan                 https://github.com/robertdavidgraham/masscan
            Shodan                  https://www.shodan.io 
            Censys                  https://censys.io
            Project Sonar           https://www.rapid7.com/research/project-sonar
            Dirsearch               https://github.com/maurosoria/dirsearch 
            Gobuster                https:// github.com/OJ/gobuster        
            EyeWitness              https://github.com/FortyNorthSecurity/EyeWitness
            Snapper                 https://github.com/dxa4481/Snapper
            OWASP ZAP               https://owasp.org/www-project-zap
            GrayhatWarfare          https://buckets.grayhatwarfare.com        
            Lazys3                  https://github.com/nahamsec/lazys3 
            Bucket Stream           https://github.com/eth0izzle/bucket-stream

        ```
        => WHOIS looks for the owner of a domain or IP.
        
        => ViewDNS.info reverse WHOIS (https://viewdns.info/reversewhois/) is a tool that searches for reverse WHOIS data by 
        using a keyword.
        
        => nslookup queries internet name servers for IP information about a host.
        
        => ViewDNS reverse IP (https://viewdns.info/reverseip/) looks for domains hosted on the same server, given an IP or domain.
        
        => crt.sh (https://crt.sh/), Censys (https://censys.io/), and Cert Spotter (https://sslmate.com/certspotter/) are platforms 
        you can use to find certificate information about a domain.
        
        => Sublist3r (https://github.com/aboul3la/Sublist3r/), SubBrute (https://github.com/TheRook/subbrute/), 
        Amass (https://github.com/OWASP/Amass/), and Gobuster (https://github.com/OJ/gobuster/) enumerate subdomains.
        
        => Daniel Miessler’s SecLists (https://github.com/danielmiessler/SecLists/) is a list of keywords that can be used during 
        various phases of recon and hacking. For example, it contains lists that can be used to brute-force subdomains and filepaths
        
        => Commonspeak2 (https://github.com/assetnote/commonspeak2/) generates lists that can be used to brute-force subdomains and 
        filepaths using publicly available data.
        Altdns (https://github.com/infosec-au/altdns) brute-forces subdomains by using permutations of common subdomain names.
        
        => Nmap (https://nmap.org/) and Masscan (https://github.com/robertdavidgraham/masscan/) scan the target for open ports.
        
        => Shodan (https://www.shodan.io/), Censys (https://censys.io/), and Project Sonar (https://www.rapid7.com/research/project-sonar/) 
        can be used to find services on targets without actively scanning them.
        
        => Dirsearch (https://github.com/maurosoria/dirsearch/) and Gobuster (https:// github.com/OJ/gobuster) are directory 
        brute-forcers used to find hidden filepaths.
        
        => EyeWitness (https://github.com/FortyNorthSecurity/EyeWitness/) and Snapper (https://github.com/dxa4481/Snapper/) 
        grab screenshots of a list of URLs. They can be used to quickly scan for interesting pages among a list of enumerated paths.

        => OWASP ZAP (https://owasp.org/www-project-zap/) is a security tool that includes a scanner, proxy, and much more. Its web 
        spider can be used to discover content on a web server.
        
        => GrayhatWarfare (https://buckets.grayhatwarfare.com/) is an online search engine you can use to find public Amazon S3 buckets.
        
        => Lazys3 (https://github.com/nahamsec/lazys3/) and Bucket Stream (https://github.com/eth0izzle/bucket-stream/) brute-force 
        buckets by using keywords.

    OSINT
    =====        
        => The Google Hacking Database (https://www.exploit-db.com/google-hacking-database/) contains useful Google search 
        terms that frequently reveal vulnerabilities or sensitive files.
        
        => KeyHacks (https://github.com/streaak/keyhacks/) helps you determine whether a set of credentials is valid and 
        learn how to use them to access the target’s services.
        
        => Gitrob (https://github.com/michenriksen/gitrob/) finds potentially sensitive files that are pushed to public 
        repositories on GitHub.
        
        => TruffleHog (https://github.com/trufflesecurity/truffleHog/) specializes in finding secrets in public GitHub 
        repositories by searching for string patterns and high-entropy strings.
        
        => PasteHunter (https://github.com/kevthehermit/PasteHunter/) scans online paste sites for sensitive information.
        
        => Wayback Machine (https://archive.org/web/) is a digital archive of internet content. You can use it to find old 
        versions of sites and their files.
        
        => Waybackurls (https://github.com/tomnomnom/waybackurls/) fetches URLs from the Wayback Machine.

    Tech Stack Fingerprinting
    =========================
        => The CVE database (https://cve.mitre.org/cve/search_cve_list.html) contains publicly disclosed vulnerabilities. 
        You can use its website to search for vulnerabilities that might affect your target.
        
        => Wappalyzer (https://www.wappalyzer.com/) identifies content management systems, frameworks, and programming 
        languages used on a site.
        
        => BuiltWith (https://builtwith.com/) is a website that shows you which web technologies a website is built with.
        
        => StackShare (https://stackshare.io/) is an online platform that allows developers to share the tech they use. 
        You can use it to collect information about your target.
        
        => Retire.js (https://retirejs.github.io/retire.js/) detects outdated JavaScript libraries and Node.js packages.

    Automation
    ==========
        => Git (https://git-scm.com/) is an open sourced version-control system. You can use its git diff command to keep 
        track of file changes.
        => You should now have a solid understanding of how to conduct reconnaissance on a target. Remember to keep extensive 
        notes throughout your recon process, as the information you collect can really balloon over time. Once you have a solid 
        understanding of how to conduct recon on a target, you can try to leverage recon platforms like 
        Nuclei (https://github.com/projectdiscovery/nuclei/) or Intrigue Core (https://github.com/intrigueio/intrigue-core/) 
        to make your recon process more efficient. But when you’re starting out, I recommend that you do recon manually with 
        individual tools or write your own automated recon scripts to learn about the process.

